#version 450

layout(std140, binding = 0) uniform UniformData {
    mat3 R; 
    vec3 T;
    int width;
    int height;
    float focal_x;
    float focal_y;
    int startPoint;
};

struct Ray {
    vec4 origin;
    vec4 direction;
};

layout(std430, binding = 1) writeonly buffer RayBuffer {
    Ray rays[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= width * height) return;

    float x = int(idx % uint(width)) + 0.5;
    float y = int(idx / uint(width)) + 0.5;

    vec3 dir_cam = vec3(
        (x - width / 2.0) / focal_x,
        (y - height / 2.0) / focal_y,
        1.0
    );

    vec3 dir_world = R * (dir_cam);

    rays[idx].origin = vec4(T, 0);
    rays[idx].direction = vec4(normalize(dir_world), 0);
}